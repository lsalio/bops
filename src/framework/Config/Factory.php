<?php
/**
 * This file is part of bops
 *
 * @copyright Copyright (C) 2020 Jayson Wang
 * @license   MIT License
 * @link      https://github.com/wjiec/php-bops
 */
namespace Bops\Config;

use Bops\Config\Loader\LoaderInterface;
use League\Flysystem\Filesystem;
use Phalcon\Config;


/**
 * Class Factory
 *
 * @package Bops\Config
 */
class Factory {

    /**
     * The name of the service
     *
     * @var string
     */
    protected $name;

    /**
     * The configure directory
     *
     * @var LoaderInterface
     */
    protected $loader;

    /**
     * Config instance
     *
     * @var Config
     */
    protected $config;

    /**
     * The configure is from cache
     *
     * @var bool
     */
    protected $fromCache;

    /**
     * The prefix string of cache filename
     *
     * @var string
     */
    protected static $prefix = '__';

    /**
     * The suffix string of cache filename
     *
     * @var string
     */
    protected static $suffix = '__';

    /**
     * Factory constructor.
     *
     * @param string $name The name of the factory and using cache filename
     * @param LoaderInterface $loader
     */
    public function __construct(string $name, LoaderInterface $loader) {
        $this->name = join('', [self::$prefix, $name, self::$suffix]);
        $this->loader = $loader;
        $this->config = new Config();
    }

    /**
     * Returns configure
     *
     * @return Config
     */
    public function get(): Config {
        return $this->config;
    }

    /**
     * Load all modules and returns a config
     *
     * @param array $configs
     * @param bool $merge
     * @return Factory|Config
     */
    public function load(array $configs = [], bool $merge = false) {
        if (!$merge) {
            $this->config = new Config();
        }

        $basedir = container('navigator')->configCacheDir();
        /* @var Filesystem $filesystem */
        $filesystem = container('filesystem', $basedir);
        if ($filesystem->has("{$this->name}.php") && !container('environment')->contains('development')) {
            $this->fromCache = true;
            static::merge($this->config, $basedir . "/{$this->name}.php");
            $configs = array_filter($configs, function(string $c) {
                return !isset($this->config->{$c});
            });

            if (empty($configs)) {
                return $this;
            }
        }

        $this->fromCache = false;
        foreach ($configs as $c) {
            static::merge($this->config, $this->loader->pathOf("{$c}.php"), ($c === 'config' ? '' : $c));
        }

        return $this;
    }

    /**
     * Dump the configure to cache file
     *
     * @return $this
     */
    public function dump() {
        if (!$this->fromCache) {
            /* @var Filesystem $filesystem */
            $filesystem = container('filesystem', container('navigator')->configCacheDir());
            $contents = '<?php' . PHP_EOL
                . '/* !! PLEASE DO NOT EDIT THIS FILE DIRECTLY !! */' . PHP_EOL
                . 'return ' . var_export($this->config->toArray(), true) . ';' . PHP_EOL;
            $filesystem->put("{$this->name}.php", $contents, []);
        }
        return $this;
    }

    /**
     * Merge other configure to main object
     *
     * @param Config $config
     * @param string $path
     * @param string|null $mount
     * @return Config
     */
    private static function merge(Config $config, string $path, string $mount = ''): Config {
        /** @noinspection PhpIncludeInspection */
        $value = include $path;
        if (is_array($value)) {
            $value = new Config($value);
        }

        if ($value instanceof Config) {
            if (empty($mount)) {
                return $config->merge($value);
            }
            $config[$mount] = (new Config())->merge($value);
        }
        return $config;
    }


}
